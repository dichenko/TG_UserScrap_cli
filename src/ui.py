"""
–ú–æ–¥—É–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""
from typing import List, Dict, Optional

class UserInterface:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    
    @staticmethod
    def display_welcome():
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        print("=" * 60)
        print("üì± Telegram Chat Exporter")
        print("=" * 60)
        print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ Telegram-—á–∞—Ç–æ–≤")
        print()
    
    @staticmethod
    def display_chats(chats: List[Dict]):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        if not chats:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏")
            return
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(chats)}")
        print("-" * 60)
        
        for i, chat in enumerate(chats, 1):
            print(f"{i:2d}. {chat['title']}")
            print(f"    ID: {chat['id']} | –¢–∏–ø: {chat['type']} | –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {chat['participants_count']}")
            print()
    
    @staticmethod
    def select_chat(chats: List[Dict]) -> Optional[int]:
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —á–∞—Ç"""
        if not chats:
            return None
        
        while True:
            try:
                choice = input("üîç –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —á–∞—Ç–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞: ").strip()
                
                # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
                if choice.isdigit():
                    choice_num = int(choice)
                    if 1 <= choice_num <= len(chats):
                        selected_chat = chats[choice_num - 1]
                        print(f"‚úÖ –í—ã–±—Ä–∞–Ω —á–∞—Ç: {selected_chat['title']}")
                        return selected_chat['id']
                    else:
                        print(f"‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {len(chats)}")
                        continue
                
                # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω ID —á–∞—Ç–∞
                try:
                    chat_id = int(choice)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —á–∞—Ç –≤ —Å–ø–∏—Å–∫–µ
                    for chat in chats:
                        if chat['id'] == chat_id:
                            print(f"‚úÖ –í—ã–±—Ä–∞–Ω —á–∞—Ç: {chat['title']}")
                            return chat_id
                    
                    print("‚ùå –ß–∞—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
                    continue
                    
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ ID —á–∞—Ç–∞")
                    continue
                    
            except KeyboardInterrupt:
                print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return None
    
    @staticmethod
    def confirm_export(chat_title: str, participants_count: int) -> bool:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        print(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É:")
        print(f"   –ß–∞—Ç: {chat_title}")
        print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}")
        print()
        
        while True:
            confirm = input("üöÄ –ù–∞—á–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç? (y/n): ").strip().lower()
            if confirm in ['y', 'yes', '–¥–∞', '–¥']:
                return True
            elif confirm in ['n', 'no', '–Ω–µ—Ç', '–Ω']:
                return False
            else:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ 'y' –∏–ª–∏ 'n'")
    
    @staticmethod
    def display_progress(current: int, total: int):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        percentage = (current / total) * 100 if total > 0 else 0
        print(f"\rüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {current}/{total} ({percentage:.1f}%)", end="", flush=True)
    
    @staticmethod
    def display_completion():
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        print("\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("=" * 60) 