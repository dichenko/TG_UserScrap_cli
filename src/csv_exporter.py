"""
–ú–æ–¥—É–ª—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª
"""
import csv
import os
import re
from datetime import datetime
from typing import List, Dict
import logging

logger = logging.getLogger(__name__)

class CSVExporter:
    """–ö–ª–∞—Å—Å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
    
    @staticmethod
    def sanitize_filename(filename: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã, –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –≤ –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤ Windows
        invalid_chars = r'[<>:"/\\|?*]'
        sanitized = re.sub(invalid_chars, '_', filename)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        sanitized = re.sub(r'\s+', ' ', sanitized).strip()
        sanitized = re.sub(r'_+', '_', sanitized)
        
        return sanitized
    
    @staticmethod
    def export_participants(participants: List[Dict], chat_title: str) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ CSV —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        if not participants:
            print("‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return ""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        current_date = datetime.now().strftime("%Y-%m-%d")
        sanitized_title = CSVExporter.sanitize_filename(chat_title)
        filename = f"{sanitized_title} - {current_date}.csv"
        
        # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ output
        output_dir = "output"
        output_path = os.path.join(output_dir, filename)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É output, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs(output_dir, exist_ok=True)
            
            with open(output_path, 'w', newline='', encoding='utf-8-sig') as csvfile:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π
                fieldnames = [
                    'TGid', 'Username', 'Usersurname', 'First_Name', 'Last_Name', 
                    'Phone', 'Bio', 'Premium', 'Verified', 'Bot', 'Deleted', 
                    'Scam', 'Fake', 'Status', 'Last_Seen'
                ]
                
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                for participant in participants:
                    row = {
                        'TGid': participant.get('tgid', ''),
                        'Username': f"@{participant.get('username', '')}" if participant.get('username') else '',
                        'Usersurname': participant.get('usersurname', ''),
                        'First_Name': participant.get('first_name', ''),
                        'Last_Name': participant.get('last_name', ''),
                        'Phone': participant.get('phone', ''),
                        'Bio': participant.get('bio', ''),
                        'Premium': '–î–∞' if participant.get('premium', False) else '–ù–µ—Ç',
                        'Verified': '–î–∞' if participant.get('verified', False) else '–ù–µ—Ç',
                        'Bot': '–î–∞' if participant.get('bot', False) else '–ù–µ—Ç',
                        'Deleted': '–î–∞' if participant.get('deleted', False) else '–ù–µ—Ç',
                        'Scam': '–î–∞' if participant.get('scam', False) else '–ù–µ—Ç',
                        'Fake': '–î–∞' if participant.get('fake', False) else '–ù–µ—Ç',
                        'Status': participant.get('status', ''),
                        'Last_Seen': participant.get('last_seen', '')
                    }
                    writer.writerow(row)
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {output_path}")
            print(f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}")
            print(f"üìã –ü–æ–ª—è: {', '.join(fieldnames)}")
            return output_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ CSV: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return "" 