"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
"""
import logging
import asyncio
from typing import List, Dict, Optional, Tuple
from telethon import TelegramClient
from telethon.tl.types import (
    Channel, 
    Chat, 
    User,
    ChatFull,
    ChannelFull,
    Message
)
from telethon.errors import (
    FloodWaitError,
    ChatAdminRequiredError,
    ChannelPrivateError
)

logger = logging.getLogger(__name__)

class ChatManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏"""
    
    def __init__(self, client: TelegramClient):
        self.client = client
    
    async def get_available_chats(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
        available_chats = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
            async for dialog in self.client.iter_dialogs():
                chat = dialog.entity
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª
                if isinstance(chat, (Channel, Chat)):
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                        full_chat = await self.client.get_entity(chat.id)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                        if hasattr(full_chat, 'participants_count') and full_chat.participants_count:
                            chat_info = {
                                'id': chat.id,
                                'title': chat.title,
                                'participants_count': full_chat.participants_count,
                                'type': '–ö–∞–Ω–∞–ª' if isinstance(chat, Channel) and chat.broadcast else '–ì—Ä—É–ø–ø–∞'
                            }
                            available_chats.append(chat_info)
                            
                    except (ChatAdminRequiredError, ChannelPrivateError):
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞—Ç—ã –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                        continue
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat.title}: {e}")
                        continue
                        
        except FloodWaitError as e:
            print(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")
            return []
        
        return available_chats
    
    async def get_all_chats_with_access_status(self) -> Tuple[List[Dict], List[Dict]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —á–∞—Ç—ã, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ"""
        available_chats = []
        unavailable_chats = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
            async for dialog in self.client.iter_dialogs():
                chat = dialog.entity
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª
                if isinstance(chat, (Channel, Chat)):
                    chat_info = {
                        'id': chat.id,
                        'title': chat.title,
                        'type': '–ö–∞–Ω–∞–ª' if isinstance(chat, Channel) and chat.broadcast else '–ì—Ä—É–ø–ø–∞'
                    }
                    
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                        full_chat = await self.client.get_entity(chat.id)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                        if hasattr(full_chat, 'participants_count') and full_chat.participants_count:
                            chat_info['participants_count'] = full_chat.participants_count
                            available_chats.append(chat_info)
                        else:
                            unavailable_chats.append(chat_info)
                            
                    except (ChatAdminRequiredError, ChannelPrivateError):
                        # –ß–∞—Ç—ã –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                        unavailable_chats.append(chat_info)
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat.title}: {e}")
                        unavailable_chats.append(chat_info)
                        
        except FloodWaitError as e:
            print(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
            return [], []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")
            return [], []
        
        return available_chats, unavailable_chats
    
    async def get_chat_participants(self, chat_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
        participants = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
            async for participant in self.client.iter_participants(chat_id):
                if isinstance(participant, User):
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    try:
                        user = await self.client.get_entity(participant.id)
                        if isinstance(user, User):
                            participant_info = {
                                'tgid': user.id,
                                'username': user.username or '',
                                'usersurname': f"{user.first_name or ''} {user.last_name or ''}".strip()
                            }
                            participants.append(participant_info)
                    except Exception as e:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —á–∞—Ç–∞
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {participant.id}: {e}")
                        participant_info = {
                            'tgid': participant.id,
                            'username': participant.username or '',
                            'usersurname': f"{participant.first_name or ''} {participant.last_name or ''}".strip()
                        }
                        participants.append(participant_info)
                    
        except ChatAdminRequiredError:
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return []
        except ChannelPrivateError:
            print("‚ùå –û—à–∏–±–∫–∞: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª. –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.")
            return []
        except FloodWaitError as e:
            print(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            return []
        
        return participants
    
    async def analyze_messages_for_users(self, chat_id: int, limit: int) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–æ–≤"""
        users = {}
        
        try:
            print(f"üìä –ê–Ω–∞–ª–∏–∑ {limit} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            async for message in self.client.iter_messages(chat_id, limit=limit):
                if message and message.sender and isinstance(message.sender, User):
                    user_id = message.sender.id
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                    if user_id not in users:
                        users[user_id] = {
                            'tgid': user_id,
                            'username': message.sender.username or '',
                            'usersurname': f"{message.sender.first_name or ''} {message.sender.last_name or ''}".strip()
                        }
                        
        except FloodWaitError as e:
            print(f"‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ñ–¥–µ–º {e.seconds} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(e.seconds)
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–∞–ª–∏–∑
            return await self.analyze_messages_for_users(chat_id, limit)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–æ–∫
        users_list = list(users.values())
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤: {len(users_list)}")
        return users_list
    
    async def get_chat_by_id(self, chat_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –ø–æ ID"""
        try:
            chat = await self.client.get_entity(chat_id)
            if isinstance(chat, (Channel, Chat)):
                return {
                    'id': chat.id,
                    'title': chat.title,
                    'type': '–ö–∞–Ω–∞–ª' if isinstance(chat, Channel) and chat.broadcast else '–ì—Ä—É–ø–ø–∞'
                }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞ –ø–æ ID {chat_id}: {e}")
            return None
        
        return None 