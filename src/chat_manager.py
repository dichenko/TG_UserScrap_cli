"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
"""
import logging
import asyncio
import random
from typing import List, Dict, Optional, Tuple
from telethon import TelegramClient
from telethon.tl.types import (
    Channel, 
    Chat, 
    User,
    ChatFull,
    ChannelFull,
    Message,
    UserStatusOnline,
    UserStatusOffline,
    UserStatusRecently,
    UserStatusLastWeek,
    UserStatusLastMonth
)
from telethon.errors import (
    FloodWaitError,
    ChatAdminRequiredError,
    ChannelPrivateError
)

logger = logging.getLogger(__name__)

class ChatManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏"""
    
    def __init__(self, client: TelegramClient):
        self.client = client
    
    async def _get_detailed_user_info(self, user: User) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        user_info = {
            'tgid': user.id,
            'username': user.username or '',
            'usersurname': f"{user.first_name or ''} {user.last_name or ''}".strip(),
            'first_name': user.first_name or '',
            'last_name': user.last_name or '',
            'phone': user.phone or '',
            'bio': '',
            'premium': False,
            'verified': False,
            'bot': False,
            'deleted': False,
            'scam': False,
            'fake': False,
            'location': '',
            'status': 'unknown',
            'last_seen': '',
            'common_chats_count': 0
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            full_user = await self.client.get_entity(user.id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if hasattr(full_user, 'about') and full_user.about:
                user_info['bio'] = full_user.about
            
            if hasattr(full_user, 'premium') and full_user.premium:
                user_info['premium'] = True
                
            if hasattr(full_user, 'verified') and full_user.verified:
                user_info['verified'] = True
                
            if hasattr(full_user, 'bot') and full_user.bot:
                user_info['bot'] = True
                
            if hasattr(full_user, 'deleted') and full_user.deleted:
                user_info['deleted'] = True
                
            if hasattr(full_user, 'scam') and full_user.scam:
                user_info['scam'] = True
                
            if hasattr(full_user, 'fake') and full_user.fake:
                user_info['fake'] = True
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if hasattr(full_user, 'status'):
                if isinstance(full_user.status, UserStatusOnline):
                    user_info['status'] = 'online'
                elif isinstance(full_user.status, UserStatusOffline):
                    user_info['status'] = 'offline'
                    if hasattr(full_user.status, 'was_online'):
                        user_info['last_seen'] = str(full_user.status.was_online)
                elif isinstance(full_user.status, UserStatusRecently):
                    user_info['status'] = 'recently'
                elif isinstance(full_user.status, UserStatusLastWeek):
                    user_info['status'] = 'last_week'
                elif isinstance(full_user.status, UserStatusLastMonth):
                    user_info['status'] = 'last_month'
                    
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user.id}: {e}")
        
        return user_info
    
    async def _add_delay(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É 1-3 —Å–µ–∫—É–Ω–¥—ã"""
        delay = random.uniform(0.3, 1.0)
        await asyncio.sleep(delay)
    
    async def get_available_chats(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
        available_chats = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
            async for dialog in self.client.iter_dialogs():
                chat = dialog.entity
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª
                if isinstance(chat, (Channel, Chat)):
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                        full_chat = await self.client.get_entity(chat.id)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                        if hasattr(full_chat, 'participants_count') and full_chat.participants_count:
                            chat_info = {
                                'id': chat.id,
                                'title': chat.title,
                                'participants_count': full_chat.participants_count,
                                'type': '–ö–∞–Ω–∞–ª' if isinstance(chat, Channel) and chat.broadcast else '–ì—Ä—É–ø–ø–∞'
                            }
                            available_chats.append(chat_info)
                            
                    except (ChatAdminRequiredError, ChannelPrivateError):
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞—Ç—ã –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                        continue
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat.title}: {e}")
                        continue
                        
        except FloodWaitError as e:
            print(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")
            return []
        
        return available_chats
    
    async def get_all_chats_with_access_status(self) -> Tuple[List[Dict], List[Dict]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —á–∞—Ç—ã, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ"""
        available_chats = []
        unavailable_chats = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
            async for dialog in self.client.iter_dialogs():
                chat = dialog.entity
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª
                if isinstance(chat, (Channel, Chat)):
                    chat_info = {
                        'id': chat.id,
                        'title': chat.title,
                        'type': '–ö–∞–Ω–∞–ª' if isinstance(chat, Channel) and chat.broadcast else '–ì—Ä—É–ø–ø–∞'
                    }
                    
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                        full_chat = await self.client.get_entity(chat.id)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                        if hasattr(full_chat, 'participants_count') and full_chat.participants_count:
                            chat_info['participants_count'] = full_chat.participants_count
                            available_chats.append(chat_info)
                        else:
                            unavailable_chats.append(chat_info)
                            
                    except (ChatAdminRequiredError, ChannelPrivateError):
                        # –ß–∞—Ç—ã –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                        unavailable_chats.append(chat_info)
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat.title}: {e}")
                        unavailable_chats.append(chat_info)
                        
        except FloodWaitError as e:
            print(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
            return [], []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")
            return [], []
        
        return available_chats, unavailable_chats
    
    async def get_chat_participants(self, chat_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        participants = []
        
        try:
            print("üë• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
            async for participant in self.client.iter_participants(chat_id):
                if isinstance(participant, User):
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    participant_info = await self._get_detailed_user_info(participant)
                    participants.append(participant_info)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await self._add_delay()
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 25 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    if len(participants) % 25 == 0:
                        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}")
                    
        except ChatAdminRequiredError:
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return []
        except ChannelPrivateError:
            print("‚ùå –û—à–∏–±–∫–∞: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª. –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.")
            return []
        except FloodWaitError as e:
            print(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            return []
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}")
        return participants
    
    async def get_total_message_count(self, chat_id: int) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            total_messages = await self.client.get_messages(chat_id, limit=0)
            return total_messages
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return 0
    
    async def analyze_messages_for_users(self, chat_id: int, limit: int) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        users = {}
        
        try:
            if limit == -1:  # –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                total_messages = await self.get_total_message_count(chat_id)
                print(f"üìä –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ({total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π)...")
                message_iterator = self.client.iter_messages(chat_id)
            else:
                print(f"üìä –ê–Ω–∞–ª–∏–∑ {limit} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
                message_iterator = self.client.iter_messages(chat_id, limit=limit)
            
            processed_count = 0
            
            async for message in message_iterator:
                if message and message.sender and isinstance(message.sender, User):
                    user_id = message.sender.id
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                    if user_id not in users:
                        user_info = await self._get_detailed_user_info(message.sender)
                        users[user_id] = user_info
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        await self._add_delay()
                
                processed_count += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 250 —Å–æ–æ–±—â–µ–Ω–∏–π
                if processed_count % 250 == 0:
                    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {processed_count}, –Ω–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ—Ä–æ–≤: {len(users)}")
                
                # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ (–∫—Ä–æ–º–µ —Å–ª—É—á–∞—è "–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
                if limit != -1 and processed_count >= limit:
                    break
                        
        except FloodWaitError as e:
            print(f"‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ñ–¥–µ–º {e.seconds} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(e.seconds)
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–∞–ª–∏–∑
            return await self.analyze_messages_for_users(chat_id, limit)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–æ–∫
        users_list = list(users.values())
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤: {len(users_list)}")
        return users_list
    
    async def get_chat_by_id(self, chat_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –ø–æ ID"""
        try:
            chat = await self.client.get_entity(chat_id)
            if isinstance(chat, (Channel, Chat)):
                return {
                    'id': chat.id,
                    'title': chat.title,
                    'type': '–ö–∞–Ω–∞–ª' if isinstance(chat, Channel) and chat.broadcast else '–ì—Ä—É–ø–ø–∞'
                }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞ –ø–æ ID {chat_id}: {e}")
            return None
        
        return None 