#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã Telegram Chat Exporter
"""
import asyncio
import sys
import logging
from src.config import Config
from src.auth import TelegramAuth
from src.chat_manager import ChatManager
from src.csv_exporter import CSVExporter
from src.ui import UserInterface

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def export_chat_participants(chat_manager: ChatManager, chat_id: int, chat_title: str) -> bool:
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    print("üë• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
    participants = await chat_manager.get_chat_participants(chat_id)
    
    if not participants:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞")
        return False
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if not UserInterface.confirm_export(chat_title, len(participants)):
        print("‚ùå –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω")
        return False
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV
    print("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV...")
    filename = CSVExporter.export_participants(participants, chat_title)
    
    if filename:
        UserInterface.display_completion()
        print(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ")
        return False

async def export_chat_messages(chat_manager: ChatManager, chat_id: int, chat_title: str) -> bool:
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞"""
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    message_count = UserInterface.ask_for_message_count()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    users = await chat_manager.analyze_messages_for_users(chat_id, message_count)
    
    if not users:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π")
        return False
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if not UserInterface.confirm_export(chat_title, len(users)):
        print("‚ùå –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω")
        return False
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV
    print("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV...")
    filename = CSVExporter.export_participants(users, chat_title)
    
    if filename:
        UserInterface.display_completion()
        print(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ")
        return False

async def process_chat_selection(chat_manager: ChatManager, available_chats: list, unavailable_chats: list) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∞—Ç–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç"""
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
    all_chats = available_chats + unavailable_chats
    
    if not all_chats:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤")
        return False
    
    # –í—ã–±–∏—Ä–∞–µ–º —á–∞—Ç
    selected_chat_id = UserInterface.select_chat(all_chats)
    if not selected_chat_id:
        print("‚ùå –ß–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–∞—Ç–µ
    selected_chat = await chat_manager.get_chat_by_id(selected_chat_id)
    if not selected_chat:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —á–∞—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    is_available = any(chat['id'] == selected_chat_id for chat in available_chats)
    
    if is_available:
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        return await export_chat_participants(chat_manager, selected_chat_id, selected_chat['title'])
    else:
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–± –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        if UserInterface.ask_for_message_analysis():
            return await export_chat_messages(chat_manager, selected_chat_id, selected_chat['title'])
        else:
            print("‚ùå –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω")
            return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    try:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        UserInterface.display_welcome()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not Config.validate():
            print("\nüìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        auth = TelegramAuth()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API...")
        if not await auth.connect():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API")
            return
        
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        if not await auth.authenticate():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            await auth.disconnect()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = auth.get_client()
        chat_manager = ChatManager(client)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤...")
            available_chats, unavailable_chats = await chat_manager.get_all_chats_with_access_status()
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —á–∞—Ç—ã
            UserInterface.display_chats_with_access_status(available_chats, unavailable_chats)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —á–∞—Ç–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç
            success = await process_chat_selection(chat_manager, available_chats, unavailable_chats)
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏
            if not UserInterface.ask_for_another_export():
                break
        
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
        await auth.disconnect()
        print("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
    if sys.version_info < (3, 7):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7 –∏–ª–∏ –≤—ã—à–µ")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
    asyncio.run(main()) 